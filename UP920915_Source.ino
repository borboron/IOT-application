//Required by Blynk broker in order to connect
#define BLYNK_TEMPLATE_ID "TMPLaR_SFRdC" // ID of template used
#define BLYNK_DEVICE_NAME "Temperature" // Name assigned to device in Blynk
#define BLYNK_AUTH_TOKEN  "gfvKIa_bRjbkJ2eo_rYCU_xBNozJNcPr" // Token of application created on Blynk

#define AnalogOutput 1023 // Maximum value obtained from analogRead() of LDR pin
#define BaseVoltage 5.0 //Base voltage from Arduino 5V pin
#define Resistor 10000 // Resistance of resistor used in circuit as a constant value to convert to lux
#define Scalar 12518931 // Scalar generated by graph obtained from results of https://www.digikey.com/en/maker/projects/design-a-luxmeter-with-an-ldr-and-an-arduino/623aeee0f93e427bb57e02c4592567d1
#define Exponent -1.405 //Exponent of change in lux as resitance in the ldr increases Obtained from calculcations performed by https://www.digikey.com/en/maker/projects/design-a-luxmeter-with-an-ldr-and-an-arduino/623aeee0f93e427bb57e02c4592567d1

#define BLYNK_PRINT Serial //For Debugging shows device is connecting to Blynk

#include "DHT.h" // DHT sensor library
#include <ESP8266_Lib.h> // ESP8266 Wifi module Library
#include <BlynkSimpleShieldEsp8266.h> // Blynk Esp library
#include <SoftwareSerial.h> // SofwareSerial library used to create software serial connection for wifi
#include <ServoTimer2.h> // ServoTimer2 library used to control servo movements. Original library caused errors with SofwareSerial due to timer issues, therefore ServoTimer2 was used.

#define serialCommunicationSpeed 9600 // Baud rate variable 
#define DHTPIN 6     // Digital pin connected to the DHT sensor
#define DHTTYPE DHT11 // Version of DHT sensor used
#define FANPIN 7 // Assigning digitial pin to the relay fan switch

BlynkTimer timer; //Create Blynk timer to use in loop

SoftwareSerial EspSerial(2, 3); // RX, TX relocated to two digital pins

ServoTimer2 servo1; // Initialize servo1 object

//Blynk application token, required for login
char auth[] = BLYNK_AUTH_TOKEN; 
//WiFi credentials of home wifi network
char ssid[] = "BORBORONPC";
//Password for wifi network
char pass[] = "brobjkov123";

// Initialize DHT sensor.
DHT dht(DHTPIN, DHTTYPE);

//Intialize the wifi module and set serial connection
ESP8266 wifi(&EspSerial);

//Variables required by the program
float temperature; // float to store temperature readings
float humidity; // float to store humidity readings
float targetTemp; // float to store targetTemp set from Blynk
unsigned long targetLux; // float to store targetLux set from Blynk 
unsigned long ldrLux; // int to store the lux value calculated from LDR 

//Setup void is run a single time
void setup()
{
 // Debug console start and set baud rate
 Serial.begin(serialCommunicationSpeed);
 //Wait 10 millisec before starting wifi serial connection
 delay(10);
 // Set ESP8266 baud rate
 EspSerial.begin(serialCommunicationSpeed);
 //Delay of 10 millisec
 delay(10);
 //Start temperature and humidity sensor
 dht.begin();
 //Delay of 10 millisec
 delay(10);
 //Attach servo motor to pin 9
 servo1.attach(9);
 //set pinMode of fan pin as OUTPUT
 pinMode(FANPIN, OUTPUT);
 //Set intial state of Fan and relay as off
 digitalWrite(FANPIN, LOW);
 //Begin connection to Blynk broker, pass required parameters
 Blynk.begin(auth, wifi, ssid, pass);
 //Timers set with interval duration and void function assigned
 timer.setInterval(2000L, sensor); // sensor void will be run every 2 seconds
 timer.setInterval(5000L, lux); // lux void will be run every 5 seconds

}

//Serial debugging has been removed due to serial connection freezing due to either serial port or arduino memory being overloaded
void sensor()
{
  //Get sensor reading for humidity
  humidity = dht.readHumidity();
  //Get sensor reading for temperature, in Celsius(default)
  temperature = dht.readTemperature();

  checkTemperature(); // Calls checkTemperature void

  Blynk.virtualWrite(V5, temperature); //Send the temperature value to virtual pin 5 for Blynk to display
  Blynk.virtualWrite(V6, humidity); // Send the humidity value to virtual pin 5 for Blynk to display
  
}

// Method to that checks current temperature against target temp set by the user in Blynk
void checkTemperature()
{
  // If statement that determines if the temperature value recorded is higher or lower than the targetTemp set in Blynk
  if(temperature > targetTemp){
   digitalWrite(FANPIN, HIGH); //If current temp is higher then turn the fan on
   
 }

  else if(temperature <= targetTemp){
  
  digitalWrite(FANPIN, LOW); // If temp is lower turn the fan off
 }
}

//Void takes the analogRead(A0) and converts it to an appropriate lux value
void lux()
{
  int ldr; //Declare int
  float resistorVoltage; //Declare float
  float ldrVoltage; //Declare float
  float ldrResistance; //Declare float

  ldr = analogRead(A0); //Set value of ldr as reading from pin A0

// Convert the analog output to the original voltage sent to the arduino
  resistorVoltage = (float)ldr / AnalogOutput * BaseVoltage; // The value outputted is divided by the maximum possible analog output multiplied by the set voltage in the circuit.

  ldrVoltage = BaseVoltage - resistorVoltage; // Calculate the voltage of the LDR resistor by subtracting the constant voltage of the 10k resistor

  ldrResistance = ldrVoltage/resistorVoltage * Resistor; //Calculate resitance in the LDR by dividing the voltage of the resistor and LDr and multiplying by the constant resistance of the 10k resistor

  ldrLux = Scalar * pow(ldrResistance, Exponent); //Using Scalar and exponent values provided by the analysis of  https://www.digikey.com/en/maker/projects/design-a-luxmeter-with-an-ldr-and-an-arduino/623aeee0f93e427bb57e02c4592567d1

  
  checkLuxLevel();

  Blynk.virtualWrite(V1, ldrLux); //Send the lux value obtained to Blynk
  
}

void checkLuxLevel()
{
  //If statement is run to determine if the current light intensity is greater than the targetLux set in Blynk by the user.
  if(ldrLux >= targetLux){
  servo1.write(0); //If light intensity is equal or greater move servo to this position. Blind is attached to servo which blocks sunlight
  
}
  else{
  servo1.write(2250); // Else move servo to this position and blind is removed.
}
}


//Function that receives a value fom virtual pin 4 of Blynk
BLYNK_WRITE(V4)
{
  targetTemp = param.asInt(); // assigning incoming value from pin V4 to a variable
  Serial.print(" The target Temperature is: "); //Debugging
  Serial.println(targetTemp); // Print the target temp when received

  checkTemperature();
  
}

//Function used to receive value for targetLux intensity from Blynk
BLYNK_WRITE(V0)
{
  targetLux = param.asLongLong(); // assigning incoming value from pin V0 to a variable as Long
  Serial.print(" The maximum lux is: ");//Debugging
  Serial.println(targetLux);//Output targetLux
  
  checkLuxLevel();
}


//Main loop
void loop()
{
 //Run the timer which runs all timers set in the setup at the intervals specified.
 timer.run(); // Used instead of delay to prevent timeout of connection between device and Blynk broker server
 //Runs constant handshakes with Blynk to maintain connection
 Blynk.run();
  } 
